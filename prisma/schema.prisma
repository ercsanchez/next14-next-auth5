// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // url      = env("DATABASE_URL")

  // from vercel postgres
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique // required in auth.js docs
  emailVerified DateTime?
  image         String?
  password      String? // from tutorial | for CredentialsProvider
  role          UserRole  @default(USER) // from tutorial
  accounts      Account[]
  // sessions      Session[]
  // Optional for WebAuthn support
  // Authenticator Authenticator[]

  // createdAt DateTime @default(now())
  // updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid()) // from tutorial
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text // "@db.Text" from tutorial
  access_token      String? @db.Text // "@db.Text" from tutorial
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text // "@db.Text" from tutorial
  session_state     String?

  // createdAt DateTime @default(now())
  // updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // @@id([provider, providerAccountId]) // auth.js docs
  @@unique([provider, providerAccountId]) // from tutorial
}

// model Session {
//   sessionToken String   @unique
//   userId       String
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}
